function MarkerInfo = ReadMarkerInfo(filename)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\KIM_Development\Data\Rot_Experiments\EXP_forpaper1\Triangulation\Lung_MVMarkersInfo.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/16 17:18:49

%% Initialize variables.
%filename = 'D:\KIM_Development\Data\Rot_Experiments\EXP_forpaper1\Triangulation\Lung_MVMarkersInfo.txt';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
MarkerInfo.Fx = rawCellColumns(2:end, 1);
MarkerInfo.Frame = cell2mat(rawNumericColumns(2:end, 1));
MarkerInfo.GantryAngle = cell2mat(rawNumericColumns(2:end, 2));
MarkerInfo.X1 = cell2mat(rawNumericColumns(2:end, 3));
MarkerInfo.Y1 = cell2mat(rawNumericColumns(2:end, 4));
MarkerInfo.Z1 = cell2mat(rawNumericColumns(2:end, 5));
MarkerInfo.X2 = cell2mat(rawNumericColumns(2:end, 6));
MarkerInfo.Y2 = cell2mat(rawNumericColumns(2:end, 7));
MarkerInfo.Z2 = cell2mat(rawNumericColumns(2:end, 8));
MarkerInfo.X3 = cell2mat(rawNumericColumns(2:end, 9));
MarkerInfo.Y3 = cell2mat(rawNumericColumns(2:end, 10));
MarkerInfo.Z3 = cell2mat(rawNumericColumns(2:end, 11));
MarkerInfo.VecDiff1 = cell2mat(rawNumericColumns(2:end, 12));
MarkerInfo.VecDiff2 = cell2mat(rawNumericColumns(2:end, 13));
MarkerInfo.VecDiff3 = cell2mat(rawNumericColumns(2:end, 14));
MarkerInfo.meanVecDiff = cell2mat(rawNumericColumns(2:end, 15));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

end